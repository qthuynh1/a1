[qthuynh1@c7-qthuynh1 as1]$ cat a1_qthuynh1.py 
#!/usr/bin/env python3
'''
OPS435 Assignment 1 - Fall 2019
Program: a1_qthuynh1.py (replace student_id with your Seneca User name)
Author: Quang Truong Huynh
The python code in this file (a1_qthuynh1.py) is original work written by
"Student Name". No code in this file is copied from any other source 
except those provided by the course instructor, including any person, 
textbook, or on-line resource. I have not shared this python script 
with anyone or anything except for submission for grading.  
I understand that the Academic Honesty Policy will be enforced and 
violators will be reported and appropriate action will be taken.
'''

import os
import sys

def after(today):
    if len(today) != 10:
        return '0000/00/00'
    else:
       str_year, str_month, str_day = today.split('/')
       year = int(str_year)
       month = int(str_month)
       day = int(str_day)

       lyear = year % 4
       if lyear == 0:
          feb_max = 29 # this is a leap year
       else:
          feb_max = 28 # this is not a leap year

       lyear = year % 100
       if lyear == 0:
          feb_max = 28 # this is not a leap year

       lyear = year % 400
       if lyear == 0:
          feb_max = 29 # this is a leap year

       tmp_day = day + 1 # next day

       mon_max = { 1:31, 2:feb_max, 3:31, 4:30, 5:31, 6:30, 7:31, 8:31, 9:30, 10:31, 11:30, 12:31}
       if tmp_day > mon_max[month]:
          to_day = tmp_day % mon_max[month] # if tmp_day > this month's max, reset to 1
          tmp_month = month + 1
       else:
          to_day = tmp_day
          tmp_month = month + 0

       if tmp_month > 12:
           to_month = 1
           year = year + 1
       else:
           to_month = tmp_month + 0

       next_date = str(year)+"/"+str(to_month).zfill(2)+"/"+str(to_day).zfill(2)
     
       return next_date





def before(today):
    if len(today) != 10:
        return '0000/00/00'
    else:
       str_year, str_month, str_day = today.split('/')
       year = int(str_year)
       month = int(str_month)
       day = int(str_day)

       mon_max = days_in_mon(year)

       tmp_day = day - 1

    if tmp_day == 0:   #If the day is 0, change the month to the previous one
        month = month -1
        if month == 0:   #If the month is 0, change the year to the previous one
            year = year - 1
            month = 12
            tmp_day = 31
        else:   #Otherwise, the day will be the max day of the month
            tmp_day = mon_max[month]

    previous_day = str(year)+str(month).zfill(2)+str(tmp_day).zfill(2)

    return previous_day

def dbda(date,days):
    i = 0
    count = 0
    result = date
    if len(str(days)) == 8:   #Check if y is a proper date
        valid_date(days)
        if days > date:   #Count the days in between if y > x
            while result < days:
                count += 1
                result = after(result)
        elif x > y:   #Count the days in between if x > y
            while result > days:
                count += 1
                result = before(result)
        print(count)
    else:   #If y is not a proper date
        if int(days) > 0:
            while int(days) > i:
                i += 1
                if sys.argv[1] == '--step':   #If first argument is '--step', print the results of the next days increasing by one.
                    result = afer(result)
                    print(result)
                else:
                    result = after(result)
        elif int(days) < 0:
            while i > int(days):
                i = i - 1
                if sys.argv[1] == '--step':   #If first argument is '--step', print the results of the previous days decreasing by one.
                    result = before(result)
                    print(result)
                else:
                    result = before(result)
        else:   #Otherwise the day is the same
            result = result

        if sys.argv[1] == '--step':
            print('', end='')   #Print new line and end on new line
        else:
            print(result)



def days_in_mon(year_value):
    if leap_year(year_value):   #This will be a leap year
        feb = 29
    else:   #This will not be a leap year
        feb = 28

    mon_max = { 1:31, 2:feb, 3:31, 4:30, 5:31, 6:30, 7:31, 8:31, 9:30, 10:31, 11:30, 12:31}   #The max number of days in each month

    return mon_max

def leap_year(year_value):

    if (year_value % 4 == 0):   #Leap year divisible by 4
        if (year_value % 100 == 0):   #Leap year not divisble by 100
            if (year_value % 400 == 0):   #Leap year divisible by 400
                leapyear = True
            else:
                leapyear = False
        else:
            leapyear = True
    else:
        leapyear = False
    return leapyear



def valid_date(today):
    if (len(today) != 8):   #Check to see if x has a proper amount of numbers
        print('Error: wrong date entered')
        sys.exit()
    else:
        year = int(today[0:4])
        month = int(today[4:6])
        day = int(today [6:])
        mon_max = days_in_mon(year)

        if month not in mon_max.keys():
            print('Error: wrong month entered')
            sys.exit()
        else:
            day_max = mon_max[month]
            if day not in range (1,day_max + 1):
                print('Error: wrong day entered')
                sys.exit()

def usage():

    if ((len(sys.argv) != 3) and len(sys.argv) != 4):   #Check to see if there are 3 or 4 arguments
        print(sys.argv[0] + ' [--step] YYYYMMDD +/-n')   #Otherwise print this message
        sys.exit()


if __name__ == "__main__":
    usage()   #Usage error if number of arguments is incorrect
    if sys.argv[1] == '--step':   #If argument one is '--step', then arguments 2 and 3 will be x and y
        date = sys.argv[2]
        days = sys.argv[3]
    else:   #If there is no '--step' argument, arguments 1 and 2 will be x and y
        date = sys.argv[1]
        days = sys.argv[2]

    dbda(date,days)

